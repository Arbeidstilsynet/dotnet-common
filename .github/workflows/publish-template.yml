name: Publish NuGet Package (Reusable)

on:
  workflow_call:
    inputs:
      package-path:
        required: true
        type: string
jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4
        with:
          dotnet-version: '8.0.x'
          config-file: ./nuget.config
          source-url: https://pkgs.dev.azure.com/Atil-utvikling/Public/_packaging/AT.Public.NuGet/nuget/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.AZURE_DEVOPS_PUBLISH_PACKAGE_PAT}}

      - uses: ./.github/actions/get-metadata-from-csprojectfile
        id: get_metadata_from_csprojectfile
        with:
          package-path: ${{ inputs.package-path }}
    
      - uses: ./.github/actions/nuget-version-check
        id: nuget_version_check
        with:
          name: ${{ steps.get_metadata_from_csprojectfile.outputs.name }}
          version: ${{ steps.get_metadata_from_csprojectfile.outputs.version }}

      - name: Publish package if not already published
        working-directory: "${{ inputs.package-path }}"
        if: steps.nuget_version_check.outputs.published == 'false'
        run: |
          dotnet pack -c Release
          dotnet nuget push "./bin/Release/*.nupkg" -k GithubDeployJob
          echo "Published ${{ steps.get_metadata_from_csprojectfile.outputs.name }} version ${{ steps.get_metadata_from_csprojectfile.outputs.version }}"

      - name: Stop if already published
        if: steps.nuget_version_check.outputs.published == 'true'
        run: |
          echo "Package ${{ steps.get_metadata_from_csprojectfile.outputs.name }} version ${{ steps.get_metadata_from_csprojectfile.outputs.version }} is already published. Skipping."
          exit 0