name: Build (PR, reusable)

on:
  workflow_call:
    inputs:
      package-path:
        required: true
        type: string

jobs:
  check-and-prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-continue: ${{ steps.check_changes.outputs.should-continue }}
      parent_dir: ${{ steps.get_parent_dir.outputs.parent_dir }}
      package_path: ${{ inputs.package-path }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Get parent directory for input package path
        id: get_parent_dir
        uses: Arbeidstilsynet/action-parent-dir@46af696cd79a18e2392d809e820bc31d9b6e345b # v1
        with:
          path: ${{ inputs.package-path }}

      - name: Check if changes are inside package path
        id: check_changes
        run: |
          parent_dir="${{ steps.get_parent_dir.outputs.parent_dir }}"
          echo "DEBUG: parent_dir=$parent_dir"
          changed_files=$(git --no-pager diff --name-only origin/main...HEAD | grep "$parent_dir" || true)
          # If empty, do not continue
            if [ -z "$changed_files" ]; then
            echo "should-continue=false" >> $GITHUB_OUTPUT
            echo "No changes detected which require a version update. Exiting workflow gracefully."
            exit 0
          fi
          # Check if all changed files are markdown files
          non_md_files=$(echo "$changed_files" | grep -vE '\.md$' || true)
          # If empty, do not continue
          if [ -z "$non_md_files" ]; then
            echo "should-continue=false" >> $GITHUB_OUTPUT
            echo "No changes detected which require a version update. Exiting workflow gracefully."
          else
            echo "should-continue=true" >> $GITHUB_OUTPUT
            echo "Changes detected which require a version update. The workflow will continue..."
          fi
          exit 0

  build-dotnet:
    needs: check-and-prepare
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: needs.check-and-prepare.outputs.should-continue == 'true'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Build and Test .NET solution
        uses: Arbeidstilsynet/action-dotnet-build@51403325a6c4ccdc45545112d125177e0f0f4969 # v1
        with:
          working-directory: ${{ needs.check-and-prepare.outputs.parent_dir }}

  post-build-checks:
    needs: [check-and-prepare, build-dotnet]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: needs.check-and-prepare.outputs.should-continue == 'true'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Get version and name from csproj file
        uses: Arbeidstilsynet/action-dotnet-get-csproj-metadata@1ce26ff56a71e150145f2f95c235a0d18c899bb7 # v1
        id: get_metadata_from_csprojectfile
        with:
          working-directory: ${{ needs.check-and-prepare.outputs.package_path }}

      - name: Check if package version exists
        uses: Arbeidstilsynet/action-nuget-check-published@2d56ea14816f152c6fa7086a7632f0db19e3cef9 # v1
        id: nuget_version_check
        with:
          name: ${{ steps.get_metadata_from_csprojectfile.outputs.name }}
          version: ${{ steps.get_metadata_from_csprojectfile.outputs.version }}
          source-feed: AT.Public.NuGet

      - name: Check if version is prerelease
        id: prerelease_check
        run: |
          if [ "${{ steps.nuget_version_check.outputs.published }}" = "true" ]; then
            echo "❌ This version is already published. Either increase the version or switch to a release version if the branch is ready."
            exit 1
          fi
          VERSION="${{ steps.get_metadata_from_csprojectfile.outputs.version }}"
          # Check if the version string contains a hyphen (prerelease in SemVer)
          if [[ "$VERSION" == *-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish prerelease package
        if: steps.prerelease_check.outputs.is_prerelease == 'true'
        uses: Arbeidstilsynet/action-dotnet-publish@5c7b82b6faee3f6ae19e3f0fe1fe3c86e2fe8d37 # v1
        with:
          working-directory: ${{ needs.check-and-prepare.outputs.package_path }}
          nuget-auth-token: ${{ secrets.AZURE_DEVOPS_PUBLISH_PACKAGE_PAT }}

      - name: Fail if prerelease was published
        if: steps.prerelease_check.outputs.is_prerelease == 'true'
        run: |
          echo "✅ Prerelease package was published successfully."
          echo "❌ This branch cannot be merged until the prerelease version is removed from the .csproj file."
          exit 1

      - name: Check if package version was updated
        id: get_version
        run: |
          VERSION="${{ steps.get_metadata_from_csprojectfile.outputs.version }}"
          FOUND="${{ steps.nuget_version_check.outputs.last_version }}"
          if [ "${{steps.nuget_version_check.outputs.published }}" = "true" ]; then
            echo "❌ You did not increase the version number. This version ($VERSION) is the same as the last published version."
            exit 1
          else
            echo "✅ You increased the version number. The last published version was '$FOUND'. The new version $VERSION is going to be published when merging into main."
          fi

      - name: Check for changelog
        run: |
          CHANGELOG=$(find "${{ needs.check-and-prepare.outputs.package_path }}" -maxdepth 1 -name 'CHANGELOG.md' | head -n 1)
          if [ -f "$CHANGELOG" ]; then
            echo "Changelog found."
            # Optionally, check if the changelog contains the version string
            if grep -q "${{ steps.get_metadata_from_csprojectfile.outputs.version }}" "$CHANGELOG"; then
              echo "✅ Changelog contains entry for version ${{ steps.get_metadata_from_csprojectfile.outputs.version }}."
            else
              echo "❌ Changelog does not contain entry for version ${{ steps.get_metadata_from_csprojectfile.outputs.version }}."
              exit 1
            fi
          else
            echo "❌ No changelog found. Please add a CHANGELOG.md file to the package path ${{ needs.check-and-prepare.outputs.package_path }}."
            exit 1
          fi
