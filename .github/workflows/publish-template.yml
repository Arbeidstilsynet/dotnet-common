name: Publish changed package (reusable)

on:
  workflow_call:
    inputs:
      package-path:
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Get version and name from csproj file
        id: get_metadata_from_csprojectfile
        uses: Arbeidstilsynet/action-dotnet-get-csproj-metadata@1ce26ff56a71e150145f2f95c235a0d18c899bb7 # v1
        with:
          working-directory: ${{ inputs.package-path }}

      - name: Check if package version exists
        id: nuget_version_check
        uses: Arbeidstilsynet/action-nuget-check-published@97b57b112fc62aca0288e93154469eccc728232e # v1
        with:
          name: ${{ steps.get_metadata_from_csprojectfile.outputs.name }}
          version: ${{ steps.get_metadata_from_csprojectfile.outputs.version }}
          source-feed: AT.Public.NuGet

      - name: Publish package if not already published
        if: steps.nuget_version_check.outputs.published == 'false'
        uses: Arbeidstilsynet/action-dotnet-publish@v1
        with:
          working-directory: ${{ inputs.package-path }}
          nuget-auth-token: ${{ secrets.AZURE_DEVOPS_PUBLISH_PACKAGE_PAT }}

      # we don't want to create github prereleases to keep the release page clean
      - name: Check if version is prerelease
        id: prerelease_check
        run: |
          VERSION="${{ steps.get_metadata_from_csprojectfile.outputs.version }}"
          if [[ "$VERSION" == *-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog section for current version
        id: changelog
        working-directory: "${{ inputs.package-path }}"
        run: |
          VERSION="${{ steps.get_metadata_from_csprojectfile.outputs.version }}"
          if [ -f CHANGELOG.md ]; then
            awk -v ver="$VERSION" '
              BEGIN {found=0}
              # Match headings like ## 1.2.3 or ## [1.2.3]
              $0 ~ "^##[[:space:]]*\\[?"ver"\\]?" {found=1; print; next}
              found && /^##[[:space:]]*\[?[0-9]+\.[0-9]+\.[0-9]+/ {exit}
              found {print}
            ' CHANGELOG.md > section.txt
            echo 'changelog<<EOF' >> $GITHUB_OUTPUT
            cat section.txt >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          else
            echo 'changelog=No changelog found.' >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.nuget_version_check.outputs.published == 'false' && steps.prerelease_check.outputs.is_prerelease == 'false'
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2
        with:
          tag_name: "${{ steps.get_metadata_from_csprojectfile.outputs.name }}@${{ steps.get_metadata_from_csprojectfile.outputs.version }}"
          name: "${{ steps.get_metadata_from_csprojectfile.outputs.name }} v${{ steps.get_metadata_from_csprojectfile.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Stop if already published
        if: steps.nuget_version_check.outputs.published == 'true'
        run: |
          echo "Package ${{ steps.get_metadata_from_csprojectfile.outputs.name }} version ${{ steps.get_metadata_from_csprojectfile.outputs.version }} is already published. Skipping."
          exit 0
